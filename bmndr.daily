#!/usr/bin/env perl

# USAGE:   bmndr.daily
#          Lists and/or toggles today's daily tasks
#          Depends on lydgate's bmndr script and its configuration
#
# AUTHOR:  Philip Hellyer, www.hellyer.net
# URL:     https://github.com/pjjh/bmndr
# FILE:    bmndr.top
# LICENSE: Creative Commons BY-NC-SA
#          http://creativecommons.org/licenses/by-nc-sa/4.0/
#          Copyright 2015 Philip Hellyer

our $beemuser;
require "${path}beemapi.pl";

use warnings;
use strict;
use POSIX qw(strftime);
use Getopt::Long;

# CONFIG

# TODO move to a config file
my $goal = 'dailies';

# END CONFIG
#

my $add;
my $all;
my $delete;
my $help;
my $stats;
my $test;
my $toggle;
my $yesterday;

GetOptions(
  "add"        => \$add,
  "all"        => \$all,
  "delete"     => \$delete,
  "goal=s"     => \$goal,
  "help"       => \$help,
  "stats"      => \$stats,
  "test"       => \$test,
  "toggle"     => \$toggle,
  "yesterday"  => \$yesterday,
);


if ( $help ) {
  $0 =~ /([^\/]+)$/;
  print "Usage: \t $1 [--goal goalname] [substring]*\n";
  print "       \t $1 [--goal goalname] --add [--toggle] description\n";
  print "       \t $1 [--goal goalname] --delete [substring]\n";
  print "\n";
  print "\t display today's entries in the '$goal' goal\n";
  print "\t checks off items matching any substring provided\n";
  print "\n";
  print "Options:\n";
  print "\t --add       \t create a new daily item and check it off\n";
  print "\t --all       \t check off all the items on the list\n";
  print "\t --delete    \t deletes all items that match the substring\n";
  print "\t --goal      \t specify the goal to update, default: '$goal'\n";
  print "\t --help      \t displays this text\n";
#  print "\t --stats     \t summarize your dailies TODO\n";
  print "\t --test      \t displays output, but doesn't update Beeminder\n";
  print "\t --toggle    \t toggles items matching any substring provided\n";
  print "\t --yesterday \t adjusts yesterday's items, not today's\n";
  exit 0;
}

# delta on 'right now', back 24h if --yesterday
my $timediff = ( $yesterday ? -86400 : 0 );
# daystamp '20151225' is christmas 2015
my $todaystamp = strftime '%Y%m%d', localtime( time + $timediff );


# were we run already today? SNIPPET
#system( "/usr/bin/touch -t ${todaystamp}0000 today" );
#my $firstrun = system( "/bin/test bmndr.daily.lastrun -nt today" );
#system( "/usr/bin/touch bmndr.daily.lastrun" );

# fetch the most recent day's dailies
print 'fetching' . ($goal ne 'dailies' ? " $goal " : ' ' ) . "dailies...\n";
my @datapoints = ();
my $latestday = '20111012';
@datapoints = 
    sort { $a->{'comment'} cmp $b->{'comment'} }
    grep { $_->{'daystamp'} eq $latestday }
    grep { $_->{'daystamp'} ge $latestday and 
           $_->{'daystamp'} le $todaystamp and 
           $latestday = $_->{'daystamp'} }
    grep { $_->{'comment'} !~ /RE(COMMITT|START)ED/ }
    @{ beemfetch( $goal ) };

# copy to today, if needed
if ( $latestday lt $todaystamp ) {
  print "creating dailies...\n";
  for my $d ( @datapoints ) {
    $d->{value} = 0;
    $d->{id} = beemcreate( $beemuser, $goal, time + $timediff, $d->{'value'}, $d->{'comment'} ) unless $test;
  }
}



# build a regexp to match command line args
our $args = undef;
if ( scalar @ARGV ) {
  my $separator = '|';          # default to alternating
  $separator = ' ' if $add;     # but we want spaces if adding
  $args = join $separator, @ARGV;
}

# add the new datapoint
if ( $add ) {
  my %d = ( 
    daystamp => $todaystamp,
    comment  => $args,
    value    => ( $toggle ? 0 : 1 ),  # default to checked, unless $toggle
  );

  print "creating new daily '$d{'comment'}'\n";
  $d{id} = beemcreate( $beemuser, $goal, time + $timediff, $d{'value'}, $d{'comment'} ) unless $test;

  # include it in the list
  @datapoints = sort { $a->{'comment'} cmp $b->{'comment'} } @datapoints, \%d;
  $args = undef;
}


my @delete_these = ();
for my $d ( @datapoints ) {

  my $changed = 0;
  if ( $all or $args and $d->{'comment'} =~ /$args/io ) {

    if ( $delete ) { 
      print 'X ', $d->{'comment'}, "\n";
      push @delete_these, $d;
    }
    elsif ( $toggle ) { 
      # toggled
      print $d->{'value'}, ' ', $d->{'comment'}, "\n";
      $d->{'value'} = ( $d->{'value'} + 1 ) % 2, # 0=>1, 1=>0
      print "> toggled to $d->{'value'}\n";
      $changed = 1;
    }
    elsif ( not $d->{'value'} ) { 
      # just set it
      $d->{'value'} = 1;
      print '1 ', $d->{'comment'}, "\n";
      $changed = 1;
    }
  }

  if ( $changed ) {
    beemupdate( 
      $beemuser, 
      $goal, 
      $d->{'id'},
      time + $timediff,
      $d->{'value'},
      $d->{'comment'},
    ) unless $test;
  }
  else {
    print $d->{'value'}, ' ', $d->{'comment'}, "\n";
  }
}


if ( scalar @delete_these ) {
  print "\nabout to delete the X'd items. <Ctrl-C> to abort.\n";
  <STDIN>;
  for my $d ( @delete_these ) {
    beemdelete( $beemuser, $goal, $d->{id} ) unless $test;
    print "deleted '$d->{comment}'\n";
  }
}






