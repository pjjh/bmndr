#!/usr/bin/python

# USAGE: bmndr [goal] [[value] comment]
#        Based on lydgate's bmndr script
#        value defaults to 1 if omitted
#
# LICENSED on the same terms as https://github.com/lydgate/bmndr

try:
    import configparser
except ImportError:
    import ConfigParser as configparser

import os
from pprint import pprint
from textwrap import wrap
from datetime import datetime
from datetime import timedelta
from time import time
from json import loads
try:
    from urllib.parse import urlencode
    from urllib.request import urlopen
except ImportError:
    from urllib import urlencode,urlopen
from sys import argv, exit

config_path = os.path.join(os.path.expanduser('~'),'.bmndrrc')
try:
    stty_width = int(os.popen('stty size | cut -d " " -f2', 'r').read().rstrip())
except:
    stty_width = 80
#print( "Using stty_width of %d\n" % stty_width )

Config = configparser.ConfigParser()
Config.read(config_path)

def ConfigSectionMap(section):
    dict1 = {}
    options = Config.options(section)
    for option in options:
        try:
            dict1[option] = Config.get(section, option)
            if dict1[option] == -1:
                DebugPrint("skip: %s" % option)
        except:
            print("exception on %s!" % option)
            dict1[option] = None
    return dict1

def time_to_days(dt):
    days = dt.days
    if days == 1:
        return '1 day '
    else:
        return '%s days' % days

try:
    auth_token = ConfigSectionMap('account')['auth_token']
except (KeyError, configparser.NoSectionError):
    print('Error: Missing or malformed configuration file.\n')
    print('Please go to https://www.beeminder.com/api/v1/auth_token.json')
    print('Then create a ~/.bmndrrc file like this:\n')

    print('[account]')
    print('auth_token: <your auth_token>')
    exit(1)

try:
    burner = ConfigSectionMap('account')['filter']
except (KeyError, configparser.NoSectionError):
    burner = 'frontburner'

# output for running "bmndr"
if len(argv) == 1:
    data = loads(urlopen('https://www.beeminder.com/api/v1/users/me/goals.json?auth_token=%s&filter=%s' % (auth_token,burner)).read().decode('utf-8'))

    parsed = sorted(data,key=lambda data:abs(data['losedate']))

    output = []
    for i in parsed:
        timeleft = datetime.fromtimestamp(int(i['losedate'])) - datetime.now()
        if timeleft >= timedelta(0):
            days = time_to_days(timeleft)
            line = [i['slug'],days,i['headsum']]
            output.append(line)
    col_width = max([len(i[0]) for i in output]) + 1
    for row in output:
        try:
            print(wrap(''.join((row[0].ljust(col_width),row[1].rjust(9),'   ',row[2])), width=stty_width)[0])
            #print(     ''.join((row[0].ljust(col_width),row[1].rjust(9),'   ',row[2])))
        except TypeError:
            pass

# output for running "bmndr <goal>"
elif len(argv) == 2:
    goal = argv[1]
    try:
        data = loads(urlopen('https://www.beeminder.com/api/v1/users/me/goals/%s.json?auth_token=%s&datapoints=true' % (goal,auth_token)).read().decode('utf-8'))
    except:
        print("Oops, there seems to be no goal named '%s'!" % (goal))
        exit(1)
    try:
        print(''.join(('::: Progress on %s :::\n\n%s\nBare minimum: %s\n' % (data['title'],data['headsum'],data['limsum']),'\n'.join(wrap(data['graphsum'])),'\n\n%s\n' % data['graph_url'])))
        for i in data['datapoints'][-10:]:
            print(i['canonical'])
        for j in reversed( data['datapoints'] ):
            if 'reset' in j['canonical']:
              reset_on    = datetime.fromtimestamp( j['timestamp'] )
              reset_str   = reset_on.strftime('%Y-%m-%d')
              days_since  = time_to_days(datetime.now() - reset_on)
              print
              print( 'Last reset on %s, %s ago' % (reset_str, days_since))
              break

        pledge = data['contract']['amount']
        if data['contract']['stepdown_at'] is not None:
          stepdown = datetime.fromtimestamp( data['contract']['stepdown_at'] )
          print data['slug'], 'is scheduled to stepdown from', pledge, 'on', stepdown.strftime('%Y-%m-%d')
        else:
          print 'currently pledging', pledge 

    except KeyError:
        print("Oops, there seems to be no goal named '%s'!" % (goal))
        exit(1)

# output for running "bmndr <goal> <data> <comment>"
else:
    goal = argv[1]
    
    post = dict()
    post['auth_token'] = auth_token
    post['timestamp'] = round(time())
    try:
      post['value'] = float(argv[2])
      argstart = 3
    except ValueError, TypeError:
      post['value'] = 1
      argstart = 2
    if len(argv)>argstart:
        post['comment'] = ' '.join(argv[argstart:])
#    else:
#        post['comment'] = 'via bmndr at %s' % datetime.now().strftime('%X')

    params = urlencode(post)
    params = params.encode('utf-8')

    data = loads(urlopen('https://www.beeminder.com/api/v1/users/me/goals/%s/datapoints.json' % goal, params).read().decode('utf-8'))
    pprint(data)
