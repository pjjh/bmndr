#!/usr/bin/env perl

use warnings;
use strict;

require "$ENV{PWD}/beemapi.pl";

# This script is my first attempt to compute pages read in a book
# and to add that amount to a Beeminder goal.

# CONFIG

# Get your personal Beeminder auth token (after signing in) from
#   https://www.beeminder.com/api/v1/auth_token.json
our $beemauth = "EpqjXpKyTFXAQJFhknMe";  # CHANGEME to your personal beeminder auth token
our $beemuser = 'pjh';
our $beemgoal = 'reading';

# books is tuples of ISBN => Nickname
my $books = $ENV{"HOME"} . '/.books.rc';

# pages is tuples of ISBN => PageNumber
my $pages = $ENV{"HOME"} . '/.pages.rc';

# END OF CONFIG

# TODO Canonicalise the ISBN
# TODO Rewrite pages file, naive implementation just appends.
# TODO Allow for mixed-case book titles

sub print_help {
  $0 =~ /([^\/]+)$/; # filename now in $1
  print "Usage:\n";
  print "$1 [page number] [book name]\n";
  print "    Sets the page read-up-to mark for this book\n";
  print "    If greater than the previous mark, sends to Beeminder\n";
  print "    ^ [pages read] \"[isbn] pp[from]-[to] of [book name]\"\n";
  print "$1 [isbn] [book name]\n";
  print "    Adds an ISBN under a nickname for the book\n";
  print "$1 [book name]\n";
  print "    Prints a summary of this book's datapoints\n";
}



# read the config files...
my %books;
if ( -e $books ) {
  open FILE, $books or die "Couldn't open file: $!";
  while (<FILE> ) {
    m/([-0-9]+) ([\w ]+)/ or print and next;
    $books{ lc $2 } = $1;
    #print "$2 is $1\n";
  }
  close FILE;
}

my %pages;
if ( -e $pages ) {
  open FILE, $pages or die "Couldn't open file: $!";
  while (<FILE> ) {
    m/([-0-9]+) (\d+)/ or print and next;
    $pages{ $1 } = $2;
    #print "$1 on page $2\n";
  }
  close FILE;
}

sub isbn_book {
  my ( $isbn, $book ) = @_;
  print "Creating book '$book' as ISBN $isbn\n";
  print "Press <Enter> to create, <Ctrl-C> to abort\n";
  $_ = <STDIN>;
  open  FILE, ">>", $books or die "Couldn't open file: $!";
  print FILE "$isbn $book\n";
  close FILE;
}

sub page_book {
  my ( $page, $book ) = @_;
  my ( $isbn, $pagecount, $oldpage );

  $isbn = $books{$book} or die "no such book $book";

  $oldpage = $pages{$isbn};

  if ( $oldpage and $page >= $oldpage ) {
    $pagecount = $page - $oldpage;
    print "read $pagecount pages of $isbn\n";

    my $comment = "$isbn pp$oldpage-$page of $book";
    print "Press <Enter> to send to Beeminder, <Ctrl-C> to abort\n";
    print "$beemuser/$beemgoal: ^ $pagecount \"$comment\"\n";
    $_ = <STDIN>;

    print "Sending to Beeminder\n";
    beemcreate( $beemuser, $beemgoal, time(), $pagecount, $comment );
    print "Success!\n";

    print "Updating page read\n";
    open  FILE, ">>", $pages or die "Couldn't open file: $!";
    print FILE "$isbn $page\n";
    close FILE;
  }

  # 'Backwards' reading
  elsif ( $oldpage and $page < $oldpage ) {
    print "Resetting page read from $oldpage to $page\n";
    print "Press <Enter> to reset, <Ctrl-C> to abort\n";
    $_ = <STDIN>;
    open  FILE, ">>", $pages or die "Couldn't open file: $!";
    print FILE "$isbn $page\n";
    close FILE;
  }

  # First pagemark
  else {
    print "Setting page 'zero' to be $page\n";
    print "Press <Enter> to set, <Ctrl-C> to abort\n";
    $_ = <STDIN>;
    open  FILE, ">>", $pages or die "Couldn't open file: $!";
    print FILE "$isbn $page\n";
    close FILE;
  }

}

sub book {
  my ( $book ) = @_;

  my $isbn = $books{$book} or die "no such book $book";
  print "'$book' has ISBN $isbn\n";

  # FIXME This only links to the google search results, regardless of what ISBN I use
  $isbn =~ s/[\D]//g;
  print "https://books.google.com/books?isbn=$isbn\n";
  
}

sub main {

  if ( $ARGV[0] eq '--help' ) {
    print_help and exit 0;
  }

  $_ = join ' ', @ARGV;
  chomp;
  #print "Got: $_\n";


  if ( /^(\d+) ([\w ]+)/ and $1 < 10000 ) {
    page_book( $1, lc $2 );
  }

  elsif ( /^([-0-9]+) ([\w ]+)/ ) {
    isbn_book( $1, lc $2 );
  }

  elsif ( /^([\w ]+)$/ ) {
    book( lc $1 );
  }

  else {
    die "Received unexpected weirdness";
  }

}

main();

__END__


# Reading with Beeminder

Inspired by [djahandarie's reading goal](http://forum.beeminder.com/t/519)
that results in his lovely [reading graph](http://www.althack.org/reading.html). 

# Problems

Darius uses an **odometer** goal, which is ideal for reading one book at a time.
I've used them myself when slogging through books in a foreign language.
But I tend to read multiple books at a time, to put one down and start another, etc.
In the best case, this means that I read the whole of several books, just interleaved.
In practice, I don't always resume at the point that I left off.

# Solutions

I will use a **do more** style of Beeminder goal. 
This requires that I report the number of pages read, which would be tedious if not automated.

# Datapoints

Each datapoint consists of the date, the number of pages read, and the isbn of the book.

To facilitate memory, I'll 

bmndr.read 123 book


# Usage

## Create book

    bmndr.read book isbn nickname

Creates an alias under 'nickname' for the book identified by the isbn.

**TODO** can I omit the command 'book' and assume that anything with more than N digits is an ISBN?

**TODO** do something clever with the ISBN in terms of fetching author, title, etc.

## Record pages read OR reset marker

    bmndr.read pagenum nickname

If the nickname has never been seen, set pagenum as the read-to mark.

If the pagenum is lower than the read-to mark, set pagenume as the read-to mark.

If the pagenum is greater than the read-to mark, record N pages read today in Beeminder.

