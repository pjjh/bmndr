#!/usr/bin/python

# USAGE: bmndr.data goal
#        Prints the datapoints for this goal
#        Based on lydgate's bmndr script
#
# LICENSED on the same terms as https://github.com/lydgate/bmndr

try:
    import configparser
except ImportError:
    import ConfigParser as configparser

import os
from pprint import pprint
from textwrap import wrap
from datetime import datetime
from datetime import timedelta
from time import time
from json import loads
try:
    from urllib.parse import urlencode
    from urllib.request import urlopen
except ImportError:
    from urllib import urlencode,urlopen
from sys import argv, exit

config_path = os.path.join(os.path.expanduser('~'),'.bmndrrc')
try:
    stty_width = int(os.popen('stty size | cut -d " " -f2', 'r').read().rstrip())
except:
    stty_width = 80
#print( "Using stty_width of %d\n" % stty_width )

Config = configparser.ConfigParser()
Config.read(config_path)

def ConfigSectionMap(section):
    dict1 = {}
    options = Config.options(section)
    for option in options:
        try:
            dict1[option] = Config.get(section, option)
            if dict1[option] == -1:
                DebugPrint("skip: %s" % option)
        except:
            print("exception on %s!" % option)
            dict1[option] = None
    return dict1

def time_to_days(dt):
    days = dt.days
    if days == 1:
        return '1 day '
    else:
        return '%s days' % days

try:
    auth_token = ConfigSectionMap('account')['auth_token']
except (KeyError, configparser.NoSectionError):
    print('Error: Missing or malformed configuration file.\n')
    print('Please go to https://www.beeminder.com/api/v1/auth_token.json')
    print('Then create a ~/.bmndrrc file like this:\n')

    print('[account]')
    print('auth_token: <your auth_token>')
    exit(1)

try:
    burner = ConfigSectionMap('account')['filter']
except (KeyError, configparser.NoSectionError):
    burner = 'frontburner'

# output for running "bmndr <goal>"
if len(argv) == 2:
    goal = argv[1]
    try:
        data = loads(urlopen('https://www.beeminder.com/api/v1/users/me/goals/%s.json?auth_token=%s&datapoints=true' % (goal,auth_token)).read().decode('utf-8'))
    except:
        print("Oops, there seems to be no goal named '%s'!" % (goal))
        exit(1)
    try:
        for i in data['datapoints']:
            print(i['canonical'])

    except KeyError:
        print("Oops, there seems to be no goal named '%s'!" % (goal))
        exit(1)

